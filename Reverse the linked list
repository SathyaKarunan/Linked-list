Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000

Approach
1)Have three pointers NEXT,prev,curr
2)Iterate until the curr pointer is NULL
3)Initially set prev to NULL
4)next=curr->next;CURR->next=prev;curr=next
5)repeat 5th step until curr becomes NULL

Code:
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
    ListNode* curr,*prev;
    curr =head;
    prev=NULL;
    while(curr){
        head=curr->next;
        curr->next=prev;
        prev=curr;
        curr=head;
    }
    return prev;
    }
};
