Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?



Approach:
1)Its similar to reverse linked list but of k length 
2)For everytime,we would check if there is k elements,then we reverse that.If not,then we would return the head
3)After reversing k elements,we should take care of linking head and tail of curr LL of length k


Code:
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
    ListNode *prev,*tail,*next,*ptr,*curr;
    ListNode* dummy = new ListNode(0);
    dummy->next=head;
    curr=dummy->next;
    ptr=dummy;
    prev=NULL;
   
    while(true){
    ListNode *node=ptr;
    for(int j=0;j<k&&node!=NULL;j++){
    node=node->next;
    }  
    if(!node) break;   
    for(int i=0;i<k;i++){
    next=curr->next;
    curr->next=prev;
    prev=curr;
    curr=next;
    

    }
    tail=ptr->next;
    tail->next=curr;
    ptr->next=prev;
    ptr=tail;
    

    }
    return dummy->next;
    }
};
