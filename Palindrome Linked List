Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?

APPROACH:
1)Find the middle node
2)Reverse the nodes after that
3)Then compare the nodes after head and middle node with each other

1 -> 1 -> 2 -> 1 -> null 
sf
(1) Move: fast pointer goes to the end, and slow goes to the middle.

1 -> 1 -> 2 -> 1 -> null 
          s          f
(2) Reverse: the right half is reversed, and slow pointer becomes the 2nd head.

1 -> 1    null <- 2 <- 1           
h                      s
(3) Compare: run the two pointers head and slow together and compare.

1 -> 1    null <- 2 <- 1    


Code:

class Solution {
public:
    ListNode* rev(ListNode* head){
    ListNode* prev=NULL,*curr=head,*next=NULL;
    while(curr){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
    }
    bool isPalindrome(ListNode* head) {
    ListNode* slow=head,*fast=head;
    while(fast && fast->next){
    slow=slow->next;
    fast=fast->next->next;
    }
     slow=rev(slow);
    while(slow){
        if(slow->val!=head->val)return false;
        slow=slow->next;
        head=head->next;
    }
        return true;
    }
};
