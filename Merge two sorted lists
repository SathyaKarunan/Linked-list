You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.


Approach:
1)First step is if either of list is NULL , return other one;
2)Secondly,find the head of resultant list
3)After that keep curr,list1,list2
4)curr pointer represents the curr node of the lsit to be returned
5)If list1->val is smaller,then curr->next=list1
6)If list2->val is smaller,then curr->next=list2
7)continue until one of them become null
8)Then join the tail of curr to not null list



EXPLANATION

Maintain a head and a tail pointer on the merged linked list.

Then choose the head of the merged linked list by comparing the first node of both linked lists.

For all subsequent nodes in both lists, you choose the smaller current node and link it to the tail of the merged list, and moving the current pointer of that list one step forward.

You keep doing this while there are some remaining elements in both the lists.

If there are still some elements in only one of the lists, you link this remaining list to the tail of the merged list.

Initially, the merged linked list is NULL.

Compare the value of the first two nodes and make the node with the smaller value the head node of the merged linked list.

Since itâ€™s the first and only node in the merged list, it will also be the tail.

Then move head1 one step forward.


Code:

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
    ListNode* curr,*ptr;
    if(!list1)return list2;
    if(!list2)return list1;
    if(list1->val>list2->val){
        curr=list2;
        list2=list2->next;
    }
    else{
        curr=list1;
        list1=list1->next;
    }
    ptr=curr;
    while(list1 && list2){
        if(list1->val>list2->val){
            curr->next=list2;
            list2=list2->next;
        }
        else{
            curr->next=list1;
            list1=list1->next;
        }
        curr=curr->next;
    }
     if(!list1) {
         curr->next=list2;
     }  
    else{
        curr->next=list1;
    }
        return ptr;
    }
};
